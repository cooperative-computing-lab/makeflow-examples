{
	"define" : {
		"BLAST_EXE" : "./blastall",     # Executable enabling legacy BLAST invocation
		"BLAST_ALGO":  "blastn",        # Name of legacy BLAST algorithm
		"BLAST_DB":	"nt",               # BLAST database
		"SPLIT_BLAST": "./split_fasta", # Input partitioning script
		"CAT_BLAST": "./cat_blast",     # Output concatenation script
		"SEQ_PER_SPLIT": 10,            # Number of sequences per split
		"TOTAL_SEQ": 200                # Total number of sequences in input
	},

	"rules": [
	{
		"command": format(
			"%s %d small.fasta",
			SPLIT_BLAST,
			SEQ_PER_SPLIT
		),
		"inputs": [
			"small.fasta",
			SPLIT_BLAST
		],
		"outputs": [format("small.fasta.%d", x) for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT))],
		"local_job": true,
		"category": "preprocessing"
	},
	{
		"command": format(
			"%s -p %s -d %s/nt -i small.fasta.%d -o small.fasta.%d.out 2> small.fasta.%d.err",
			BLAST_EXE,
			BLAST_ALGO,
			BLAST_DB,
			x,
			x,
			x,
		),
		"inputs": [
			BLAST_EXE,
			BLAST_DB,
			format("small.fasta.%d", x)
		],
		"outputs": [
			format("small.fasta.%d.out", x),
			format("small.fasta.%d.err", x),
		],
		"resources" : {
			"cores":1,
			"memory":1000,
			"disk":1400,
			"wall-time":40
		},
		"category": "simulation"
	} for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT)),
	{
		"command": format(
			"%s output.fasta %s",
			CAT_BLAST,
			join([format("small.fasta.%d.out", x) for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT))]),
		),
		"inputs": [
			CAT_BLAST,
			format("small.fasta.%d.out", x) for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT)),
		],
		"output": [
			"output.fasta"
		],
		"local_job": true,
		"category": "analysis",
	},
	{
		"command": format(
			"cat %s > output.fasta.err",
			join([format("small.fasta.%d.err", x) for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT))]),
		),
		"inputs": [
			format("small.fasta.%d.err", x) for x in range(ceil(TOTAL_SEQ/SEQ_PER_SPLIT)),
		],
		"output": [
			"output.fasta.err"
		],
		"local_job": true,
		"category": "analysis"
	},
	],
}
